0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\node.exe',
1 verbose cli   'C:\\Users\\Kristian\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@3.10.3
3 info using node@v4.4.4
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: 'C:\\Users\\Kristian\\Documents\\NodeAtomProject\\treeutil',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory C:\Users\Kristian\AppData\Roaming\npm-cache\tree-util\1.0.0\package.tgz not in flight; packing
9 verbose correctMkdir C:\Users\Kristian\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
10 info lifecycle tree-util@1.0.0~prepublish: tree-util@1.0.0
11 silly lifecycle tree-util@1.0.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ 'C:\\Users\\Kristian\\AppData\\Roaming\\npm-cache\\tree-util\\1.0.0\\package.tgz',
12 verbose tar pack   'C:\\Users\\Kristian\\Documents\\NodeAtomProject\\treeutil' ]
13 verbose tarball C:\Users\Kristian\AppData\Roaming\npm-cache\tree-util\1.0.0\package.tgz
14 verbose folder C:\Users\Kristian\Documents\NodeAtomProject\treeutil
15 verbose addLocalTarball adding from inside cache C:\Users\Kristian\AppData\Roaming\npm-cache\tree-util\1.0.0\package.tgz
16 verbose correctMkdir C:\Users\Kristian\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
17 silly cache afterAdd tree-util@1.0.0
18 verbose afterAdd C:\Users\Kristian\AppData\Roaming\npm-cache\tree-util\1.0.0\package\package.json not in flight; writing
19 verbose correctMkdir C:\Users\Kristian\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
20 verbose afterAdd C:\Users\Kristian\AppData\Roaming\npm-cache\tree-util\1.0.0\package\package.json written
21 silly publish { name: 'tree-util',
21 silly publish   version: '1.0.0',
21 silly publish   description: 'Utility package for building a tree from array plus functions for wokring with trees',
21 silly publish   main: 'index.js',
21 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git://github.com/KristianAbrahamsen/tree-util.git' },
21 silly publish   keywords: [ 'tree', 'util', 'builder', 'node', 'traverse', 'query' ],
21 silly publish   author:
21 silly publish    { name: 'Kristian Marheim Abrahamsen',
21 silly publish      email: 'kristian.abrahamsen@gmail.com',
21 silly publish      url: 'https://github.com/KristianAbrahamsen' },
21 silly publish   license: 'MIT',
21 silly publish   bugs: { url: 'https://github.com/KristianAbrahamsen/tree-util/issues' },
21 silly publish   homepage: 'https://github.com/KristianAbrahamsen/tree-util#readme',
21 silly publish   devDependencies:
21 silly publish    { chai: '^3.5.0',
21 silly publish      grunt: '^1.0.1',
21 silly publish      'grunt-mocha': '^1.0.2',
21 silly publish      'grunt-mocha-test': '^0.13.2',
21 silly publish      mocha: '^3.1.2' },
21 silly publish   readme: '# tree-util\r\nSimple but powerfull library for building and working with tree structures.\r\n\r\n## Features\r\n\r\n  * Building tree structures based on data with parent child relations by id\r\n  * Methods for determining ancestor and descendant relations between nodes\r\n  * Methods for adding data to and getting data from tree structures\r\n  * General methods for working with trees\r\n  * Heavily tested\r\n\r\nEasy to build tree structures where the data items has a parent child relation through id properties.\r\nAn example of a data source with parent child relation can be a table in a relational database.\r\n\r\n## Examples\r\n\r\nBuilding the tree.\r\n\r\n```js\r\nvar tree_util = require(\'tree-util\')\r\n\r\n// An array where the items has a parent child reference using id properties\r\nvar items = [{ id : 1 }, { id : 2, parentid : 1 }, { id : 3, parentid : 1 },\r\n             { id : 4, parentid : 1 }, { id : 5, parentid : 3 }];\r\n\r\n// Config object to set the id properties for the parent child relation\r\nvar standardConfig =  { id : \'id\', parentid : \'parentid\'};\r\n\r\n// Creates an array of trees. For this example there will by only one tree\r\nvar trees = tree_util.buildTrees(items, standardConfig);\r\n```\r\n\r\nDetermine ancestor or descendant relationships\r\n\r\n```js\r\n// Contiued from example above\r\nvar tree = trees[0];\r\nvar rootNode = tree.rootNode;\r\nvar leafNode = tree.getNodeById(5);\r\n\r\nvar isDescendant = leafNode.isDescendantOf(rootNode); //returns true\r\nvar isAncestor = rootNode.isAncestorOf(leafNode); //returns true\r\n```\r\n\r\nAdd data to the nodes based on reference id property\r\n\r\n```js\r\n// Contiued from example above\r\n\r\nvar itemDataArray = [{ itemid : 1, value : 2, referenceid : 4 },\r\n                     { itemid : 2, value : 5, referenceid : 5 },\r\n                     { itemid : 3, value : 3, referenceid : 1 },  \r\n                     { itemid : 4, value : 1, referenceid : 1 }];\r\nvar addDataConfig = { referenceid : \'referenceid\', collectionname : \'items\' };\r\n\r\ntree.addData(itemDataArray, addDataConfig);\r\n\r\nvar nodeWithCollection = tree.getNodeById(1);\r\nvar nodeItems = nodeWithCollection.items; // returns an array with two objects\r\n```\r\n\r\n\r\nAnd many more methods and properties for working with tree structures. See API reference below for more information.\r\n\r\n## API Reference\r\n\r\nThe methods in the API either belong to the tree_util, the tree or the node.\r\n\r\n### tree_util\r\n\r\n#### Methods\r\n##### <b>buildTrees</b>\r\nBuilds a tree based on an object array and a config object which defines the id relation properties.\r\n###### Usage\r\nbuildTrees(objectArray, config);\r\n###### Arguments\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <td>\r\n        <b>Param</b>\r\n      </td>\r\n      <td>\r\n        <b>Type</b>\r\n      </td>\r\n      <td>\r\n        <b>Details</b>\r\n      </td>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>\r\n        objectArray\r\n      </td>\r\n      <td>\r\n        Array\r\n      </td>\r\n      <td>\r\n         An array of objects with ids which determines the parent child relation\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        config\r\n      </td>\r\n      <td>\r\n        object\r\n      </td>\r\n      <td>\r\n          An object which defines the properties which defines the parent child relation for the data objects in the objectArray param. The object has following properties:\r\n          <ul>\r\n            <li><b>id</b> - Name of the id property (primary key)</li>\r\n            <li><b>parentid</b> - Name of the property which reference the parent object (foreign key)</li>\r\n          </ul>\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n### tree\r\n\r\n#### Properties\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <td>\r\n        <b>Name</b>\r\n      </td>\r\n      <td>\r\n        <b>Type</b>\r\n      </td>\r\n      <td>\r\n        <b>Details</b>\r\n      </td>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>\r\n        rootNode\r\n      </td>\r\n      <td>\r\n        Node object\r\n      </td>\r\n      <td>\r\n        Root node for the tree\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n#### Methods\r\n\r\n##### <b>addData</b>\r\nAdds data to the nodes based on config object which defines the reference id.\r\n###### Usage\r\naddData(objectArray, config);\r\n###### Arguments\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <td>\r\n        <b>Param</b>\r\n      </td>\r\n      <td>\r\n        <b>Type</b>\r\n      </td>\r\n      <td>\r\n        <b>Details</b>\r\n      </td>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>\r\n        objectArray\r\n      </td>\r\n      <td>\r\n        Array\r\n      </td>\r\n      <td>\r\n         An array of objects with ids which determines the node relation\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        config\r\n      </td>\r\n      <td>\r\n        object\r\n      </td>\r\n      <td>\r\n          An object which defines the reference property and the collection name. The object has following properties:\r\n          <ul>\r\n            <li><b>referenceid</b> - Name of the referenceid property for the data object (reference primary id of node)</li>\r\n            <li><b>collectionname</b> - Name of the property which will hold the array of data object on the node</li>\r\n          </ul>\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n##### <b>getNodeById</b>\r\nGets the node in the tree based on id parameter.\r\n###### Usage\r\ngetNodeById(id);\r\n###### Arguments\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <td>\r\n        <b>Param</b>\r\n      </td>\r\n      <td>\r\n        <b>Type</b>\r\n      </td>\r\n      <td>\r\n        <b>Details</b>\r\n      </td>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>\r\n        id\r\n      </td>\r\n      <td>\r\n        Anything\r\n      </td>\r\n      <td>\r\n         Id value for node. Can be anything but is typically an integer(Number)\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n### node\r\n\r\n#### Properties\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <td>\r\n        <b>Name</b>\r\n      </td>\r\n      <td>\r\n        <b>Type</b>\r\n      </td>\r\n      <td>\r\n        <b>Details</b>\r\n      </td>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>\r\n        children\r\n      </td>\r\n      <td>\r\n        Array\r\n      </td>\r\n      <td>\r\n        An array of child nodes\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        collectionnames\r\n      </td>\r\n      <td>\r\n        Array\r\n      </td>\r\n      <td>\r\n        An array of collection name for data added to the node. These data are arrays accessible through properties with names from this collection.\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        dataObj\r\n      </td>\r\n      <td>\r\n        object\r\n      </td>\r\n      <td>\r\n        the data object used to create the node when the tree was build\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        id\r\n      </td>\r\n      <td>\r\n        Anything\r\n      </td>\r\n      <td>\r\n        Id for the node. Can be anything but is typically an integer(Number)\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        parentid\r\n      </td>\r\n      <td>\r\n        Anything\r\n      </td>\r\n      <td>\r\n        Parent id for the node. Can be anything but is typically an integer(Number)\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n### Methods\r\n\r\n##### <b>addChild</b>\r\nAdds a child node to the node\r\n###### Usage\r\naddChild(child);\r\n###### Arguments\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <td>\r\n        <b>Param</b>\r\n      </td>\r\n      <td>\r\n        <b>Type</b>\r\n      </td>\r\n      <td>\r\n        <b>Details</b>\r\n      </td>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>\r\n        child\r\n      </td>\r\n      <td>\r\n        node\r\n      </td>\r\n      <td>\r\n         Child node\r\n      </td>\r\n    </tr>    \r\n  </tbody>\r\n</table>\r\n\r\n##### <b>addParent</b>\r\nSets the parent node for the node\r\n###### Usage\r\naddParent(parentNode);\r\n###### Arguments\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <td>\r\n        <b>Param</b>\r\n      </td>\r\n      <td>\r\n        <b>Type</b>\r\n      </td>\r\n      <td>\r\n        <b>Details</b>\r\n      </td>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>\r\n        parentNode\r\n      </td>\r\n      <td>\r\n        node\r\n      </td>\r\n      <td>\r\n         Parent node\r\n      </td>\r\n    </tr>    \r\n  </tbody>\r\n</table>\r\n\r\n##### <b>getAncestors</b>\r\nGets all the ancestor nodes\r\n###### Usage\r\ngetAncestors();\r\n\r\n##### <b>getDescendants</b>\r\nGets all the descendant nodes\r\n###### Usage\r\ngetDescendants();\r\n\r\n##### <b>getRecursiveCollection</b>\r\nGets the data added to the collections specified by name for the node and its descendants (added through method addData on the tree)\r\n###### Usage\r\ngetRecursiveCollection(collectionname);\r\n###### Arguments\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <td>\r\n        <b>Param</b>\r\n      </td>\r\n      <td>\r\n        <b>Type</b>\r\n      </td>\r\n      <td>\r\n        <b>Details</b>\r\n      </td>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>\r\n        collectionname\r\n      </td>\r\n      <td>\r\n        String\r\n      </td>\r\n      <td>\r\n         Name of the collection with data on each node\r\n      </td>\r\n    </tr>    \r\n  </tbody>\r\n</table>\r\n\r\n##### <b>getRecursiveNodeData</b>\r\nGets the data added to the node and its descendants (added through method addData on the tree)\r\n###### Usage\r\ngetRecursiveNodeData();\r\n\r\n##### <b>getSingleNodeData</b>\r\nGets the data added to the node (added through method addData on the tree)\r\n###### Usage\r\ngetSingleNodeData();\r\n\r\n##### <b>isAncestorOf</b>\r\nReturns true if the current node is ancestor of the input parameter node\r\n###### Usage\r\nisAncestorOf(node);\r\n###### Arguments\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <td>\r\n        <b>Param</b>\r\n      </td>\r\n      <td>\r\n        <b>Type</b>\r\n      </td>\r\n      <td>\r\n        <b>Details</b>\r\n      </td>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>\r\n        node\r\n      </td>\r\n      <td>\r\n        node\r\n      </td>\r\n      <td>\r\n         Node to check for ancestor relation\r\n      </td>\r\n    </tr>    \r\n  </tbody>\r\n</table>\r\n\r\n##### <b>isDescendantOf</b>\r\nReturns true if the current node is descendant of the input parameter node\r\n###### Usage\r\nisDescendantOf(node);\r\n###### Arguments\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <td>\r\n        <b>Param</b>\r\n      </td>\r\n      <td>\r\n        <b>Type</b>\r\n      </td>\r\n      <td>\r\n        <b>Details</b>\r\n      </td>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>\r\n        node\r\n      </td>\r\n      <td>\r\n        node\r\n      </td>\r\n      <td>\r\n         Node to check for descendant relation\r\n      </td>\r\n    </tr>    \r\n  </tbody>\r\n</table>\r\n\r\n##### <b>isLeaf</b>\r\nReturns true if the current node is a leaf node\r\n###### Usage\r\nisLeaf();\r\n\r\n## License\r\n(The MIT License)\r\n\r\n\r\nCopyright (c) 2016 Kristian Marheim Abrahamsen\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the "Software"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: '627277fa53d1a3438bcc4e67ccd18ff5bb60d5d6',
21 silly publish   _id: 'tree-util@1.0.0',
21 silly publish   _shasum: '907def39981d1d926db4e573eefbdd277a42f2dc',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name tree-util
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'tree-util',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'tree-util',
26 silly mapToRegistry   name: 'tree-util',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/tree-util
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading C:\Users\Kristian\AppData\Roaming\npm-cache\tree-util\1.0.0\package.tgz
30 verbose request uri https://registry.npmjs.org/tree-util
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 18:24:20
33 verbose request using bearer token for auth
34 verbose request id 89fc403a891c1ac3
35 http request PUT https://registry.npmjs.org/tree-util
36 http 403 https://registry.npmjs.org/tree-util
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '95',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Mon, 14 Nov 2016 16:24:22 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-ams4433-AMS',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1479140661.132736,VS0,VE1122',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating C:\Users\Kristian\AppData\Roaming\npm-cache\registry.npmjs.org\tree-util on PUT
39 error publish Failed PUT 403
40 verbose stack Error: "You cannot publish over the previously published version 1.0.0." : tree-util
40 verbose stack     at makeError (C:\Users\Kristian\AppData\Roaming\npm\node_modules\npm\node_modules\npm-registry-client\lib\request.js:264:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (C:\Users\Kristian\AppData\Roaming\npm\node_modules\npm\node_modules\npm-registry-client\lib\request.js:252:14)
40 verbose stack     at Request._callback (C:\Users\Kristian\AppData\Roaming\npm\node_modules\npm\node_modules\npm-registry-client\lib\request.js:172:14)
40 verbose stack     at Request.self.callback (C:\Users\Kristian\AppData\Roaming\npm\node_modules\npm\node_modules\request\request.js:200:22)
40 verbose stack     at emitTwo (events.js:87:13)
40 verbose stack     at Request.emit (events.js:172:7)
40 verbose stack     at Request.<anonymous> (C:\Users\Kristian\AppData\Roaming\npm\node_modules\npm\node_modules\request\request.js:1067:10)
40 verbose stack     at emitOne (events.js:82:20)
40 verbose stack     at Request.emit (events.js:169:7)
40 verbose stack     at IncomingMessage.<anonymous> (C:\Users\Kristian\AppData\Roaming\npm\node_modules\npm\node_modules\request\request.js:988:12)
41 verbose statusCode 403
42 verbose pkgid tree-util
43 verbose cwd C:\Users\Kristian\Documents\NodeAtomProject\treeutil
44 error Windows_NT 10.0.10586
45 error argv "C:\\Program Files\\nodejs\\node.exe" "C:\\Users\\Kristian\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js" "publish"
46 error node v4.4.4
47 error npm  v3.10.3
48 error code E403
49 error "You cannot publish over the previously published version 1.0.0." : tree-util
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
